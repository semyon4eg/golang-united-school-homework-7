package coverage

import (
	"fmt"
	"os"
	"reflect"
	"testing"
	"time"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func TestLenOK(t *testing.T) {
	
	band := People{
		Person{firstName: "Richard", lastName: "Helm", birthDay: time.Date(1970, 01, 01, 00, 00, 00, 0, time.UTC)},
		Person{firstName: "Erich", lastName: "Gamma", birthDay: time.Date(1961, 03, 13, 00, 00, 00, 0, time.UTC)},
		Person{firstName: "Ralph", lastName: "Johnson", birthDay: time.Date(1955, 10, 07, 00, 00, 00, 0, time.UTC)},
		Person{firstName: "John", lastName: "Vlissides", birthDay: time.Date(1961, 8, 02, 00, 00, 00, 0, time.UTC)},
	}

	if band.Len() != len(band) {
		t.Errorf("func Len() result is not equal to len() of the slice!") 
	}
}

func TestLessOK(t *testing.T) {

	band := People{
		Person{firstName: "Richard", lastName: "Helm", birthDay: time.Date(1970, 01, 01, 00, 00, 00, 0, time.UTC)},
		Person{firstName: "John", lastName: "Gamma", birthDay: time.Date(1970, 01, 01, 00, 00, 00, 0, time.UTC)},
		Person{firstName: "Ralph", lastName: "Johnson", birthDay: time.Date(1955, 10, 07, 00, 00, 00, 0, time.UTC)},
		Person{firstName: "John", lastName: "Vlissides", birthDay: time.Date(1970, 01, 01, 00, 00, 00, 0, time.UTC)},
	}

	var k, i, j, m int = 0, 1, 2, 3

	if band.Less(i, j) != true {
		t.Errorf("func Less() result comparing birthdays is not right!")
	}

	if band.Less(k, m) == true {
		t.Errorf("func Less() result comparing firstNames is not right")
	}

	if band.Less(i, m) != true {
		t.Errorf("func Less() result comparing lastNames is not right")
	}
}

func TestSwapOK(t *testing.T) {

	band := People{
		Person{firstName: "Richard", lastName: "Helm", birthDay: time.Date(1970, 01, 01, 00, 00, 00, 0, time.UTC)},
		Person{firstName: "Erich", lastName: "Gamma", birthDay: time.Date(1961, 03, 13, 00, 00, 00, 0, time.UTC)},
		Person{firstName: "Ralph", lastName: "Johnson", birthDay: time.Date(1955, 10, 07, 00, 00, 00, 0, time.UTC)},
		Person{firstName: "John", lastName: "Vlissides", birthDay: time.Date(1961, 8, 02, 00, 00, 00, 0, time.UTC)},
	}

	var i, j = 0, 3

	band.Swap(i, j)

	if band[0].firstName != "John" || band[3].lastName != "Helm" {
		t.Errorf("func Swap() result is not right")
	}
}

func TestNewOK(t *testing.T) {

	rows, cols := 2, 5
	data := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}
	var str string = "1 2 3 4 5 \n 6 7 8 9 0 "
	var shortStr string = "1 2 3 4 5 \n 6 7 8 9"
	var charStr string = "1 A 3 4 5 \n 6 7 8 9 0 "

	errMatrix, err := New(shortStr)
	if err.Error() != fmt.Errorf("Rows need to be the same length").Error() || errMatrix != nil {
		t.Errorf("an error was expected during string parsing")
	}

	errMatrix, err = New(charStr)
	if err.Error() != fmt.Errorf("strconv.Atoi: parsing \"A\": invalid syntax").Error() || errMatrix != nil {
		t.Errorf("an error parsing letter was expected during string parsing")
	}

	matrix, err := New(str)
	if err != nil {
		t.Errorf("error during string parsing")
	}

	if matrix.rows != rows || matrix.cols != cols || ! slicesEqual(matrix.data, data) {
		t.Errorf("result slice and expected are not equal")
	}
}

func slicesEqual(a, b []int) bool {
    if len(a) != len(b) {
        return false
    }
    for i, v := range a {
        if v != b[i] {
            return false
        }
    }
    return true
}

func TestRowsOK(t *testing.T) {

	var str string = "1 2 3 4 5 \n 6 7 8 9 0 "

	expected := [][]int{
		{1, 2, 3, 4, 5},
		{6, 7, 8, 9, 0},
	}

	matrix, err := New(str)
	if err != nil {
		t.Errorf("error during string parsing")
	}

	rowsMatrix := matrix.Rows()
	if !reflect.DeepEqual(rowsMatrix, expected) {
		t.Errorf("matrixes are not equal")
	}
}

func TestColsOK(t *testing.T) {

	var str string = "1 2 3 4 5 \n 6 7 8 9 0 "

	expected := [][]int{
		{1, 6},
		{2, 7},
		{3, 8},
		{4, 9},
		{5, 0},
	}

	matrix, err := New(str)
	if err != nil {
		t.Errorf("error during string parsing")
	}

	colsMatrix := matrix.Cols()

	if !reflect.DeepEqual(colsMatrix, expected) {
		t.Errorf("matrixes are not equal")
	}
}

var ErrTxtExpectFalse = "expected false got something else"

func TestSetOK(t *testing.T) {

	var str string = "1 2 3 4 5 \n 6 7 8 9 0 "

	matrix, err := New(str)
	if err != nil {
		t.Errorf(ErrTxtExpectFalse)
	}

	if matrix.Set(-1, 1, 3) != false {
		t.Errorf(ErrTxtExpectFalse)
	}

	if matrix.Set(2, 1, 3) != false {
		t.Errorf(ErrTxtExpectFalse)
	}

	if matrix.Set(1, -1, 3) != false {
		t.Errorf(ErrTxtExpectFalse)
	}

	if matrix.Set(1, 5, 3) != false {
		t.Errorf(ErrTxtExpectFalse)
	}

	if matrix.Set(1, 4, 3) != true || matrix.data[9] != 3 {
		t.Errorf("expected true got something else and the value is not equal")
	}
}
